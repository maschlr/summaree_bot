"""Remove User and EmailToken

Revision ID: dd25645fc79f
Revises: d4bf60ad9041
Create Date: 2024-08-11 17:58:06.587264

"""
import secrets

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import column, table

from alembic import op

# revision identifiers, used by Alembic.
revision = "dd25645fc79f"
down_revision = "d4bf60ad9041"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("token")
    op.drop_table("users")

    tg_user_table = table(
        "telegram_user",
        column("id", sa.Integer),
        column("referral_token", sa.String()),
        column("referral_token_active", sa.Boolean()),
    )

    op.add_column("telegram_user", sa.Column("referral_token_active", sa.Boolean(), nullable=True))
    op.add_column("telegram_user", sa.Column("referred_by_id", sa.BigInteger(), nullable=True))
    op.add_column("telegram_user", sa.Column("referral_token", sa.String(), nullable=True))
    # Get all existing rows
    conn = op.get_bind()
    rows = conn.execute(sa.select(tg_user_table.c.id)).fetchall()

    # Update each row with a secure token
    for row in rows:
        referral_token = secrets.token_urlsafe(4)
        conn.execute(
            tg_user_table.update()
            .where(tg_user_table.c.id == row.id)
            .values(referral_token=referral_token, referral_token_active=False)
        )

    op.alter_column("telegram_user", "referral_token", nullable=False)

    op.create_unique_constraint(op.f("uq_telegram_user_referral_token"), "telegram_user", ["referral_token"])
    op.create_foreign_key(
        op.f("fk_telegram_user_referred_by_id_telegram_user"),
        "telegram_user",
        "telegram_user",
        ["referred_by_id"],
        ["id"],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("fk_telegram_user_referred_by_id_telegram_user"), "telegram_user", type_="foreignkey")
    op.drop_constraint(op.f("uq_telegram_user_referral_token"), "telegram_user", type_="unique")
    op.drop_column("telegram_user", "referred_by_id")
    op.drop_column("telegram_user", "referral_token_active")
    op.drop_column("telegram_user", "referral_token")
    op.create_table(
        "token",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("value", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("expires_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="fk_token_user_id_users", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", name="pk_token"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("telegram_user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("referral_token", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("referrer_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["referrer_id"], ["users.id"], name="fk_user_referrer_id_user"),
        sa.ForeignKeyConstraint(
            ["telegram_user_id"],
            ["telegram_user.id"],
            name="fk_user_telegram_user_id_telegram_user",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_user"),
        sa.UniqueConstraint("referral_token", name="uq_users_referral_token"),
    )
    # ### end Alembic commands ###
